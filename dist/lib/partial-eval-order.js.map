{"version":3,"sources":["../../src/lib/partial-eval-order.js"],"names":["partialEvalOrder","providesTo","inputs","order","next","inOrder","isEmpty","node","peek","shift","toAdd","get","filterNot","has","bind","union","unshiftAll","concat"],"mappings":";;;;;kBAEwBA,gB;;AAFxB;;AAEe,SAASA,gBAAT,CAA0BC,UAA1B,EAAsCC,MAAtC,EAA8C;AAC3D,MAAIC,QAAQ,oBAASD,MAAT,CAAZ;AACA,MAAIE,OAAO,qBAAUF,MAAV,CAAX;AACA,MAAIG,UAAU,mBAAQH,MAAR,CAAd;AACA,SAAQ,CAACE,KAAKE,OAAL,EAAT,EAA0B;AACxB,QAAMC,OAAOH,KAAKI,IAAL,EAAb;AACAJ,WAAOA,KAAKK,KAAL,EAAP;AACA,QAAMC,QAAQT,WAAWU,GAAX,CAAeJ,IAAf,EAAqB,qBAArB,EACWK,SADX,CACqBP,QAAQQ,GAAR,CAAYC,IAAZ,CAAiBT,OAAjB,CADrB,CAAd;AAEAA,cAAUA,QAAQU,KAAR,CAAcL,KAAd,CAAV;AACAN,WAAOA,KAAKY,UAAL,CAAgBN,KAAhB,CAAP;AACAP,YAAQA,MAAMc,MAAN,CAAaP,KAAb,CAAR;AACD;AACD,SAAOP,KAAP;AACD","file":"partial-eval-order.js","sourcesContent":["import { Stack, List, Set } from 'immutable';\n\nexport default function partialEvalOrder(providesTo, inputs) {\n  let order = new List(inputs);\n  let next = new Stack(inputs);\n  let inOrder = new Set(inputs);\n  while ( !next.isEmpty() ) {\n    const node = next.peek();\n    next = next.shift();\n    const toAdd = providesTo.get(node, new List())\n                            .filterNot(inOrder.has.bind(inOrder));\n    inOrder = inOrder.union(toAdd);\n    next = next.unshiftAll(toAdd);\n    order = order.concat(toAdd);\n  }\n  return order;\n}\n"]}