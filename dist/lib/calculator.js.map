{"version":3,"sources":["../../src/lib/calculator.js"],"names":["funcs","Calculator","sheet","parser","_makeParser","tabs","tabsById","valueSeq","deps","providesTo","vals","map","t","get","calculateAll","_processCalculations","_allCellRefs","valuesByCellRef","forEach","value","cellRef","cell","getCell","_setCellValue","toEval","keySeq","skipWhile","has","r","toList","formula","defaultTabId","withDefaultTabId","formulaValue","parse","error","result","order","_calculateCellValue","allCellRefs","toSet","evaluateFormula","staticValue","remoteValue","_getCellValue","tabId","rowIdx","colIdx","set","hasIn","setIn","tab","getIn","on","done","row","column","of","getTab","index","startCellCoord","endCellCoord","explicitTabId","range","mapRange","bind","name","params","func","toUpperCase","apply","fn"],"mappings":"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","file":"calculator.js","sourcesContent":["import { Map, List } from 'immutable';\nimport { Parser } from 'hot-formula-parser';\nimport { CellRef, CellRefRange } from 'sheety-model';\nimport evalOrder from './eval-order';\nimport partialEvalOrder from './partial-eval-order';\nimport deps from './deps';\nimport depsToProvides from './deps-to-provides';\nimport * as funcs from './sheet-funcs';\n\nexport default class Calculator {\n  constructor(sheet) {\n    this.sheet = sheet;\n    this.parser = this._makeParser();\n\n    const tabs = sheet.tabsById.valueSeq();\n    // Map from dependent to dependency cells\n    this.deps = deps(tabs);\n    // Map from CellRef p to List of CellRefs r where p provides a value needed by each r.\n    this.providesTo = depsToProvides(this.deps);\n    // Map from tab id to a List of Lists (rows and cells in the row)\n    this.vals = new Map(tabs.map(t => [t.get('id'), new List()]));\n\n    this.calculateAll();\n  }\n\n  /**\n   * Calculate the full sheet without any user input.\n   *\n   * Returns a map from tab ids to a List of Lists of values.\n   **/\n  calculateAll() {\n    return this._processCalculations(evalOrder(this.deps, this._allCellRefs()));\n  }\n\n  setValues(valuesByCellRef) {\n    valuesByCellRef.forEach((value, cellRef) => {\n      const cell = this.sheet.getCell(cellRef);\n      if ( !cell.get('isUserEditable') ) {\n        // TODO\n      }\n\n      this._setCellValue(cellRef, value);\n    });\n\n    const toEval = partialEvalOrder(\n      this.providesTo,\n      valuesByCellRef.keySeq()\n    ).skipWhile(r => valuesByCellRef.has(r)).toList()\n\n    return this._processCalculations(toEval);\n  }\n\n  /**\n   * Evaluate the formula provided, using defaultTabId as the tab for any\n   * cell references without a tab.\n   **/\n  evaluateFormula(formula, defaultTabId) {\n    return withDefaultTabId(defaultTabId, this.parser, () => {\n      const formulaValue = this.parser.parse(formula);\n      if ( formulaValue.error ) {\n        // TODO\n        return formulaValue.error;\n      }\n\n      return formulaValue.result;\n    });\n  }\n\n  _processCalculations(order) {\n    order.forEach((cellRef) => {\n      this._setCellValue(cellRef, this._calculateCellValue(cellRef));\n    });\n\n    return this.vals;\n  }\n\n  /**\n   * Return all cell references for all tabs.\n   **/\n  _allCellRefs() {\n    return this.sheet.allCellRefs().toSet();\n  }\n\n  /**\n   * Calculates the value of the cell at the given ref.\n   **/\n  _calculateCellValue(cellRef) {\n    const cell = this.sheet.getCell(cellRef);\n\n    const formula = cell.get('formula');\n    if ( formula ) {\n      return this.evaluateFormula(formula, cellRef.get('tabId'));\n    }\n\n    const staticValue = cell.get('staticValue');\n    if ( staticValue !== null ) {\n      return staticValue;\n    }\n\n    const remoteValue = cell.get('remoteValue');\n    if ( remoteValue ) {\n      // TODO: handle remote values\n    }\n\n    return this._getCellValue(cellRef);\n  }\n\n  /**\n   * Sets the value of the cell at the given ref, regardless of user-editability.\n   **/\n  _setCellValue(cellRef, value) {\n    const tabId = cellRef.get('tabId');\n    const rowIdx = cellRef.get('rowIdx');\n    const colIdx = cellRef.get('colIdx');\n\n    if ( !this.vals.has(tabId) ) {\n      this.vals = this.vals.set(tabId, new List());\n    }\n    if ( !this.vals.hasIn([tabId, rowIdx]) ) {\n      this.vals = this.vals.setIn([tabId, rowIdx], new List());\n    }\n    this.vals = this.vals.setIn([cellRef.get('tabId'), cellRef.get('rowIdx'), cellRef.get('colIdx')], value);\n  }\n\n  /**\n   * Returns the previously-set value of the cell at the given ref.\n   **/\n  _getCellValue(cellRef) {\n    const tab = this.vals.get(cellRef.get('tabId'))\n    if ( !tab ) {\n      return null;\n    }\n\n    return tab.getIn([cellRef.get('rowIdx'), cellRef.get('colIdx')]);\n  }\n\n  _makeParser() {\n    const parser = new Parser();\n\n    parser.on('callCellValue', ({row, column, tab}, done) => {\n      const tabId = tab || parser.defaultTabId;\n      const cellRef = CellRef.of(this.sheet.getTab(tabId), row.index, column.index);\n      done(this._getCellValue(cellRef));\n    });\n\n    parser.on('callRangeValue', (startCellCoord, endCellCoord, explicitTabId, done) => {\n      const tabId = explicitTabId || parser.defaultTabId;\n      const tab = this.sheet.getTab(tabId);\n      const range = this.sheet.mapRange(\n        CellRefRange.of(\n          tab,\n          startCellCoord.row.index,\n          startCellCoord.column.index,\n          endCellCoord.row.index,\n          endCellCoord.column.index\n        ),\n        this._getCellValue.bind(this)\n      );\n      done(range);\n    });\n\n    parser.on('callFunction', (name, params, done) => {\n      const func = funcs[name.toUpperCase()];\n      if ( !func ) {\n        // TODO\n      }\n\n      done(func.apply(null, params));\n    });\n\n    return parser;\n  }\n}\n\nfunction withDefaultTabId(defaultTabId, parser, fn) {\n  parser.defaultTabId = defaultTabId;\n  const result = fn();\n  parser.defaultTabId = null;\n  return result;\n}\n"]}