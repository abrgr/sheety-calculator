{"version":3,"sources":["../../src/lib/calculator.js"],"names":["funcs","Calculator","sheet","extraFuncs","parser","_makeParser","tabs","tabsById","valueSeq","deps","providesTo","vals","map","t","get","cellValueCache","calculateAll","_processCalculations","_allCellRefs","valuesByCellRef","forEach","value","cellRef","cell","getCell","_setCellValue","_evalDependents","keySeq","set","of","cellRefs","toEval","skipWhile","includes","r","toList","formula","assocData","withAssociatedParserData","formulaValue","parse","error","result","rangeRef","mapRange","_getCellValue","bind","getFormattedCell","val","format","order","_calculateCellValue","allCellRefs","toSet","skipCache","cachedValue","remove","evaluateFormula","staticValue","remoteValue","tabId","rowIdx","colIdx","has","getIn","setIn","tab","on","done","row","column","defaultTabId","getTab","index","startCellCoord","endCellCoord","explicitTabId","range","getRange","Object","keys","setFunction","name","func","wrapped","params","associatedData","fn","k"],"mappings":"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","file":"calculator.js","sourcesContent":["import { Set, Map, List } from 'immutable';\nimport { Parser } from 'hot-formula-parser';\nimport { CellRef, CellRefRange } from 'sheety-model';\nimport evalOrder from './eval-order';\nimport partialEvalOrder from './partial-eval-order';\nimport deps from './deps';\nimport depsToProvides from './deps-to-provides';\nimport * as funcs from './sheet-funcs';\n\nexport default class Calculator {\n  constructor(sheet, extraFuncs = {}) {\n    this.sheet = sheet;\n    this.parser = this._makeParser(extraFuncs);\n\n    const tabs = sheet.tabsById.valueSeq();\n    // Map from dependent to dependency cells\n    this.deps = deps(tabs);\n    // Map from CellRef p to List of CellRefs r where p provides a value needed by each r.\n    this.providesTo = depsToProvides(this.deps);\n    // Map from tab id to a List of Lists (rows and cells in the row)\n    this.vals = new Map(tabs.map(t => [t.get('id'), new List()]));\n    // Map from CellRef c to the pre-calculated value of a formula.  Primarily useful for async funcs.\n    this.cellValueCache = new Map();\n\n    this.calculateAll();\n  }\n\n  /**\n   * Calculate the full sheet without any user input.\n   *\n   * Returns a map from tab ids to a List of Lists of values.\n   **/\n  calculateAll() {\n    return this._processCalculations(evalOrder(this.deps, this._allCellRefs()));\n  }\n\n  /**\n   * Sets the values of provided cells.\n   **/\n  setValues(valuesByCellRef) {\n    valuesByCellRef.forEach((value, cellRef) => {\n      const cell = this.sheet.getCell(cellRef);\n      if ( !cell.get('isUserEditable') ) {\n        // TODO\n      }\n\n      this._setCellValue(cellRef, value);\n    });\n\n    return this._evalDependents(new Set(valuesByCellRef.keySeq()));\n  }\n\n  /**\n   * This is primarily useful for asynchronous sheet functions.\n   * After calculating their value, async functions can set a cached\n   * cell value.\n   **/\n  setCachedCellValue(cellRef, value) {\n    this.cellValueCache = this.cellValueCache.set(cellRef, value);\n    this._setCellValue(cellRef, value);\n    return this._evalDependents(Set.of(cellRef));\n  }\n\n  _evalDependents(cellRefs) {\n    const toEval = partialEvalOrder(\n      this.providesTo,\n      cellRefs\n    ).skipWhile(r => cellRefs.includes(r)).toList()\n\n    return this._processCalculations(toEval);\n  }\n\n  /**\n   * Evaluate the formula provided, using cellRef to resolve ambiguous\n   * references (those without a tab specified) and to resolve async functions.\n   **/\n  evaluateFormula(formula, cellRef) {\n    const assocData = { cellRef };\n    return withAssociatedParserData(assocData, this.parser, () => {\n      const formulaValue = this.parser.parse(formula);\n      if ( formulaValue.error ) {\n        // TODO\n        return formulaValue.error;\n      }\n\n      return formulaValue.result;\n    });\n  }\n\n  /** Given an A1 range, rangeRef, return the values of the corresponding cells\n   *  in an NxM matrix (2-d array).\n   **/\n  getRange(rangeRef) {\n    return this.sheet.mapRange(\n      rangeRef,\n      this._getCellValue.bind(this)\n    );\n  }\n\n  /**\n   * Given an A1 range, rangeRef, return the formatted values of the corresponding cells\n   * in an NxM matrix (2-d array).\n   **/\n  getFormattedRange(rangeRef) {\n    return this.sheet.mapRange(\n      rangeRef,\n      this.getFormattedCell.bind(this)\n    );\n  }\n\n  /**\n   * Given an A1 reference, return the formatted value of the corresponding cell.\n   **/\n  getFormattedCell(cellRef) {\n    const val = this._getCellValue(cellRef);\n    const cell = this.sheet.getCell(cellRef);\n    const format = cell && cell.get('format');\n\n    return format ? format.format(val) : val;\n  }\n\n  /**\n   * Evaluate each cell in order.\n   **/\n  _processCalculations(order) {\n    order.forEach((cellRef) => {\n      this._setCellValue(cellRef, this._calculateCellValue(cellRef, true));\n    });\n\n    return this.vals;\n  }\n\n  /**\n   * Return all cell references for all tabs.\n   **/\n  _allCellRefs() {\n    return this.sheet.allCellRefs().toSet();\n  }\n\n  /**\n   * Calculates the value of the cell at the given ref.\n   * If skipCache is not set, we will prefer pre-calculated values for any\n   * formulas that provided them.\n   * If skipCache is set, we will always re-calculate formulas.\n   **/\n  _calculateCellValue(cellRef, skipCache) {\n    const cell = this.sheet.getCell(cellRef);\n\n    const formula = cell.get('formula');\n    if ( formula ) {\n      const cachedValue = this.cellValueCache.get(cellRef);\n      if ( !skipCache && !!cachedValue ) {\n        return cachedValue;\n      }\n\n      this.cellValueCache = this.cellValueCache.remove(cellRef);\n      return this.evaluateFormula(formula, cellRef);\n    }\n\n    const staticValue = cell.get('staticValue');\n    if ( staticValue !== null ) {\n      return staticValue;\n    }\n\n    const remoteValue = cell.get('remoteValue');\n    if ( remoteValue ) {\n      // TODO: handle remote values\n    }\n\n    return this._getCellValue(cellRef);\n  }\n\n  /**\n   * Sets the value of the cell at the given ref, regardless of user-editability.\n   **/\n  _setCellValue(cellRef, value) {\n    const tabId = cellRef.get('tabId');\n    const rowIdx = cellRef.get('rowIdx');\n    const colIdx = cellRef.get('colIdx');\n\n    if ( !this.vals.has(tabId) ) {\n      this.vals = this.vals.set(tabId, new List());\n    }\n    if ( !this.vals.getIn([tabId, rowIdx]) ) {\n      this.vals = this.vals.setIn([tabId, rowIdx], new List());\n    }\n    this.vals = this.vals.setIn([cellRef.get('tabId'), cellRef.get('rowIdx'), cellRef.get('colIdx')], value);\n  }\n\n  /**\n   * Returns the previously-set value of the cell at the given ref.\n   **/\n  _getCellValue(cellRef) {\n    const tab = this.vals.get(cellRef.get('tabId'))\n    if ( !tab ) {\n      return null;\n    }\n\n    return tab.getIn([cellRef.get('rowIdx'), cellRef.get('colIdx')]);\n  }\n\n  _makeParser(extraFuncs) {\n    const parser = new Parser();\n\n    parser.on('callCellValue', ({row, column, tab}, done) => {\n      const defaultTabId = parser.cellRef && parser.cellRef.get('tabId');\n      const tabId = tab || defaultTabId;\n      const cellRef = CellRef.of(this.sheet.getTab(tabId), row.index, column.index);\n      done(this._getCellValue(cellRef));\n    });\n\n    parser.on('callRangeValue', (startCellCoord, endCellCoord, explicitTabId, done) => {\n      const defaultTabId = parser.cellRef && parser.cellRef.get('tabId');\n      const tabId = explicitTabId || defaultTabId;\n      const tab = this.sheet.getTab(tabId);\n      const rangeRef = CellRefRange.of(\n        tab,\n        startCellCoord.row.index,\n        startCellCoord.column.index,\n        endCellCoord.row.index,\n        endCellCoord.column.index\n      );\n      const range = this.getRange(rangeRef);\n      done(range);\n    });\n\n    Object.keys(funcs).forEach(name => {\n      parser.setFunction(name, funcs[name]);\n    });\n\n    Object.keys(extraFuncs).forEach(name => {\n      const func = extraFuncs[name];\n      const wrapped = (params) => (\n        func(params, parser.cellRef)\n      );\n      parser.setFunction(name, wrapped);\n    });\n\n    return parser;\n  }\n}\n\nfunction withAssociatedParserData(associatedData, parser, fn) {\n  Object.keys(associatedData).forEach(k => {\n    parser[k] = associatedData[k];\n  });\n  const result = fn();\n  Object.keys(associatedData).forEach(k => {\n    parser[k] = null;\n  });\n  return result;\n}\n"]}